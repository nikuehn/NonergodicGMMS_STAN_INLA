points(coords[,1], coords[,2], col="blue")
mesh1$n
# build mesh
max.edge = 10
bound.outer = 50
mesh1 = inla.mesh.2d(loc=as.matrix(coords),
max.edge = c(1,5)*max.edge,
# - use 5 times max.edge in the outer extension/offset/boundary
cutoff = max.edge/2,
offset = c(2 * max.edge, bound.outer))
plot(mesh1, main="1st attempt");
points(coords[,1], coords[,2], col="blue")
# build mesh
max.edge = 10
bound.outer = 75
mesh1 = inla.mesh.2d(loc=as.matrix(coords),
max.edge = c(1,5)*max.edge,
# - use 5 times max.edge in the outer extension/offset/boundary
cutoff = max.edge/2,
offset = c(2 * max.edge, bound.outer))
plot(mesh1, main="1st attempt");
points(coords[,1], coords[,2], col="blue")
points(utm_ev_sta[,1], utm_ev_sta[,2], col="blue")
points(utm_ev_sta[,1], utm_ev_sta[,2], col="red")
# define spde prior for constants
prior.range = c(50, 0.9)
prior.sigma = c(0.5, 0.01)
# se prior and define model for even terms
spde_eq <- inla.spde2.pcmatern(
# Mesh and smoothness parameter
mesh = mesh1, alpha = 2,
# P(practic.range < 0.3) = 0.5
prior.range = prior.range,
# P(sigma > 1) = 0.01
prior.sigma = prior.sigma)
# se prior and define model for stat terms
spde_stat <- inla.spde2.pcmatern(
# Mesh and smoothness parameter
mesh = mesh1, alpha = 2,
# P(practic.range < 0.3) = 0.5
prior.range = prior.range,
# P(sigma > 1) = 0.01
prior.sigma = prior.sigma)
A_eq <- inla.spde.make.A(mesh1, loc = utm_ev)
idx.eq <- inla.spde.make.index("idx.eq",spde_eq$n.spde)
dim(utm_ev)
A_eq <- inla.spde.make.A(mesh1, loc = as.matrix(utm_ev)
A_stat <- inla.spde.make.A(mesh1, loc = utm_sta)
A_eq <- inla.spde.make.A(mesh1, loc = as.matrix(utm_ev)
A_stat <- inla.spde.make.A(mesh1, loc = utm_sta)
A_eq <- inla.spde.make.A(mesh1, loc = as.matrix(utm_ev)
)
# convert station coordinates into UTM coodinates
long_lat_sta = cbind(data_crust$sta_lon, data_crust$sta_lat)
utm_sta = project(long_lat_sta, "+proj=utm +zone=59S ellps=WGS84")
utm_sta = as.matrix(utm_sta/1000)
dim(utm_sta)
# convert event coordinates into UTM coodinates
long_lat_ev = cbind(data_crust$ev_lon, data_crust$ev_lat)
utm_ev = project(long_lat_ev, "+proj=utm +zone=59S ellps=WGS84")
utm_ev = as.matrix(utm_ev/1000)
long_lat_ev = as.matrix(long_lat_ev)
# convert station coordinates into UTM coodinates
long_lat_sta = cbind(data_crust$sta_lon, data_crust$sta_lat)
utm_sta = project(long_lat_sta, "+proj=utm +zone=59S ellps=WGS84")
utm_sta = as.matrix(utm_sta/1000)
long_lat_sta = as.matrix(long_lat_sta)
# midpoint
utm_ev_sta <- cbind(rowMeans(cbind(utm_ev$V1,utm_sta$V1)),rowMeans(cbind(utm_ev$V2,utm_sta$V2)))
# convert event coordinates into UTM coodinates
long_lat_ev = cbind(data_crust$ev_lon, data_crust$ev_lat)
utm_ev = project(long_lat_ev, "+proj=utm +zone=59S ellps=WGS84")
utm_ev = as.data.frame(utm_ev/1000)
long_lat_ev = as.data.frame(long_lat_ev)
# convert station coordinates into UTM coodinates
long_lat_sta = cbind(data_crust$sta_lon, data_crust$sta_lat)
utm_sta = project(long_lat_sta, "+proj=utm +zone=59S ellps=WGS84")
utm_sta = as.data.frame(utm_sta/1000)
long_lat_sta = as.data.frame(long_lat_sta)
# midpoint
utm_ev_sta <- cbind(rowMeans(cbind(utm_ev$V1,utm_sta$V1)),rowMeans(cbind(utm_ev$V2,utm_sta$V2)))
A_eq <- inla.spde.make.A(mesh1, loc = as.matrix(utm_ev))
idx.eq <- inla.spde.make.index("idx.eq",spde_eq$n.spde)
A_stat <- inla.spde.make.A(mesh1, loc = as.matrix(utm_sta))
idx.stat <- inla.spde.make.index("idx.stat",spde_stat$n.spde)
# create the stack
# stack
stk1 <- inla.stack(
data = list(y = Y),
A = list(A_eq, A_stat, 1),
effects = list(idx.eq = idx.eq,
idx.stat = idx.stat,
df.covar
),
tag = 'model_eqstat')
form <- y ~ 0 + intercept + M1 + M2 + lnR + MlnR + R + lnVS +
f(eqid, model = "iid") + f(statid, model = "iid") +
f(idx.eq, model = spde_eq) + f(idx.stat, model = spde_stat)
fit_inla_spatial <- inla(form,
data = inla.stack.data(stk1),
control.predictor = list(A = inla.stack.A(stk1)),
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE),
control.inla = list(int.strategy = 'eb')
)
fit_inla_spatial$waic$waic
fit_inla$waic
fit_inla$waic$waic
fit_inla$waic
fit_inla_spatial$waic$waic
fit_inla$waic$waic
summary(fit_inla_spatial)
1/sqrt(fit_inla_spatial$summary.hyperpar$mean)[c(1,2,3)]
utm_ev$V1
min(utm_ev$V1)
max(utm_ev$V1)
min(utm_ev$V2)
max(utm_ev$V2)
local.plot.field(fit_inla_spatial$summary.random[['idx.eq']][['mean']], mesh1, xlim = c(0,1400), ylim = c(-5500,-3800))
# function definitions
local.plot.field = function(field, mesh, xlim=c(0,10), ylim=c(0,10), ...){
stopifnot(length(field) == mesh$n)
proj = inla.mesh.projector(mesh, xlim = xlim,
ylim = ylim, dims=c(300, 300))
field.proj = inla.mesh.project(proj, field)
n.col = 20
image.plot(list(x = proj$x, y=proj$y, z = field.proj),
xlim = xlim, ylim = ylim, col = plasma(n.col), nlevel=n.col+1)
}
local.plot.field2 = function(field, mesh, xlim, ylim, zlim, n.contours=10, ...){
stopifnot(length(field) == mesh$n)
# - error when using the wrong mesh
if (missing(xlim)) xlim = SPs@bbox[1, ]
if (missing(ylim)) ylim = SPs@bbox[2, ]
# - choose plotting region to be the same as the study area polygon
proj = inla.mesh.projector(mesh, xlim = xlim,
ylim = ylim, dims=c(300, 300))
# - Can project from the mesh onto a 300x300 grid
#   for plots
field.proj = inla.mesh.project(proj, field)
# - Do the projection
if (missing(zlim)) zlim = range(field.proj)
image.plot(list(x = proj$x, y=proj$y, z = field.proj),
xlim = xlim, ylim = ylim, asp=1, ...)
contour(x = proj$x, y=proj$y, z = field.proj,levels=seq(zlim[1], zlim[2],length.out = n.contours),add=TRUE, drawlabels=F, col="white")
# - without contours it is very very hard to see what are equidistant values
}
slcpo <- function(m, na.rm = TRUE) {
- sum(log(m$cpo$cpo), na.rm = na.rm)
}
local.plot.field(fit_inla_spatial$summary.random[['idx.eq']][['mean']], mesh1, xlim = c(0,1400), ylim = c(-5500,-3800))
local.plot.field(fit_inla_spatial$summary.random[['idx.stat']][['mean']], mesh1, xlim = c(-500,1400), ylim = c(-5500,-3800))
local.plot.field(fit_inla_spatial$summary.random[['idx.eq']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_ev, col = "red", cex = 0.4)
points(utm_ev, col = "black", cex = 0.4)
local.plot.field(fit_inla_spatial$summary.random[['idx.stat']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_sta, col = "black", cex = 0.4)
data_crust$domain_type
dom_type <- data_crust$domain_type
dom_type <- as.numeric(factor(dom_type))
dom_type <- data_crust$domain_type
dom_type_num <- as.numeric(factor(dom_type))
dom_type_num
max(dom_type_num)
data_reg <- data.frame(M,M1,M2,R,lnR,MlnR,lnVS,Y,eqid,statid,dom_type)
df.covar <- data.frame(intercept = 1,
M = M,
M1 = M1,
M2 = M2,
R = R,
lnR = lnR,
MlnR = MlnR,
lnVS = lnVS,
eqid = eqid_num,
statid = statid_num,
dom_id = dom_type_num
)
fit_lmer_dom <- lmer(Y ~ M1 + M2 + lnR + MlnR + lnVS + (1 | eqid) + (1 | dom_type) + (1 | statid), data = data_reg)
summary(fit_lmer_dom)
summary(fit_lmer)
fit_lmer_dom <- lmer(Y ~ M1 + M2 + lnR + MlnR + R + lnVS + (1 | eqid) + (1 | dom_type) + (1 | statid), data = data_reg)
summary(fit_lmer)
summary(fit_lmer_dom)
var(fit_lmer)
df.covar <- data.frame(intercept = 1,
M = M,
M1 = M1,
M2 = M2,
R = R,
lnR = lnR,
MlnR = MlnR,
lnVS = lnVS,
eqid = eqid_num,
statid = statid_num,
domid = dom_type_num
)
fit_inla_dom <- inla(Y ~ M1 + M2 + lnR + MlnR + R + lnVS + f(eqid, model = "iid") + f(statid, model = "iid") +
f(domid, model = "iid"),
data = df.covar,
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE))
summary(fit_inla_dom)
fit_inla_dom <- inla(Y ~ M1 + M2 + lnR + MlnR + R + lnVS + f(eqid, model = "iid") + #f(statid, model = "iid") +
f(domid, model = "iid"),
data = df.covar,
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE))
summary(fit_inla_dom)
1/sqrt(fit_inla_dom$summary.hyperpar$mean)
data_crust$domain_no
min(data_crust$domain_no)
cbind(data_crust$domain_no, data_crust$domain_type)
factor(cbind(data_crust$domain_no, data_crust$domain_type))
factor(dom_type)
unique(data_crust$domain_type)
# only crustal data with magnitude larger than 4.5 and distance smaller than 300
data_crust <- data[data$tect_type == 'Crustal'
& data$mag >= 5
& data$r_rup <= 300
& !is.na(data$Vs30_preferred)
& data$domain_type != "",]
#& data$PGA < 6,]
dim(data_crust)
# convert event coordinates into UTM coodinates
long_lat_ev = cbind(data_crust$ev_lon, data_crust$ev_lat)
utm_ev = project(long_lat_ev, "+proj=utm +zone=59S ellps=WGS84")
utm_ev = as.data.frame(utm_ev/1000)
long_lat_ev = as.data.frame(long_lat_ev)
# convert station coordinates into UTM coodinates
long_lat_sta = cbind(data_crust$sta_lon, data_crust$sta_lat)
utm_sta = project(long_lat_sta, "+proj=utm +zone=59S ellps=WGS84")
utm_sta = as.data.frame(utm_sta/1000)
long_lat_sta = as.data.frame(long_lat_sta)
# midpoint
utm_ev_sta <- cbind(rowMeans(cbind(utm_ev$V1,utm_sta$V1)),rowMeans(cbind(utm_ev$V2,utm_sta$V2)))
# prepare data
# predictors
delta <- 0.1
mb <- 6
M <- data_crust$mag
h <- 10^(-0.405 + 0.235 * M)
dlnM <- delta * log(1 + exp((M - mb) / delta))
M1 <- (M - mb) - dlnM
M2 <- dlnM
R <- data_crust$r_jb
lnR <- log(sqrt(R^2 + h^2))
MlnR <- (M - 6) * lnR
lnVS <- log(data_crust$Vs30_preferred/400)
Y <- log(data_crust$PGA)
eqid <- data_crust$evid
statid <- data_crust$sta
eqid_num <- as.numeric(factor(eqid))
statid_num <- as.numeric(factor(statid))
dom_type <- data_crust$domain_type
dom_type_num <- as.numeric(factor(dom_type))
max(dom_type_num)
data_reg <- data.frame(M,M1,M2,R,lnR,MlnR,lnVS,Y,eqid,statid,dom_type)
df.covar <- data.frame(intercept = 1,
M = M,
M1 = M1,
M2 = M2,
R = R,
lnR = lnR,
MlnR = MlnR,
lnVS = lnVS,
eqid = eqid_num,
statid = statid_num,
domid = dom_type_num
)
data_list <- list(N = length(data_crust$PGA),
NEQ = max(eqid_num),
NSTAT = max(statid_num),
M = M,
R = R,
VS = data_crust$Vs30_preferred,
Y = Y,
eq = eqid_num,
stat = statid_num
)
# -------------------------------------------
# --------- linear model --------------------
fit_lmer <- lmer(Y ~ M1 + M2 + lnR + MlnR + R + lnVS + (1 | eqid) + (1 | statid), data = data_reg)
fit_lmer_dom <- lmer(Y ~ M1 + M2 + lnR + MlnR + R + lnVS + (1 | eqid) + (1 | dom_type) + (1 | statid), data = data_reg)
summary(fit_lmer)
summary(fit_lmer_dom)
1.3578 + 1.0901 + 0.2233 + 0.5181
1.3574 + 1.1811 + 0.5181
fit_inla <- inla(Y ~ M1 + M2 + lnR + MlnR + R + lnVS + f(eqid, model = "iid") + f(statid, model = "iid"), data = df.covar,
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE))
summary(fit_inla)
1/sqrt(fit_inla$summary.hyperpar$mean)
fit_inla_dom <- inla(Y ~ M1 + M2 + lnR + MlnR + R + lnVS + f(eqid, model = "iid") + f(statid, model = "iid") +
f(domid, model = "iid"),
data = df.covar,
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE))
summary(fit_inla_dom)
1/sqrt(fit_inla_dom$summary.hyperpar$mean)
# only event terms
form <- y ~ 0 + intercept + M1 + M2 + lnR + MlnR + R + lnVS +
f(eqid, model = "iid") + f(statid, model = "iid") +
f(idx.eq, model = spde_eq)
# only spatial event terms
form_eq <- y ~ 0 + intercept + M1 + M2 + lnR + MlnR + R + lnVS +
f(eqid, model = "iid") + f(statid, model = "iid") +
f(idx.eq, model = spde_eq)
fit_inla_spatial_eq <- inla(form_eq,
data = inla.stack.data(stk1),
control.predictor = list(A = inla.stack.A(stk1)),
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE),
control.inla = list(int.strategy = 'eb')
)
summary(fit_inla_spatial_eq)
1/sqrt(fit_inla_spatial_eq$summary.hyperpar$mean)[c(1,2,3)]
local.plot.field(fit_inla_spatial_eq$summary.random[['idx.eq']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_ev, col = "black", cex = 0.4)
# only spatial event terms
stk1_eq <- inla.stack(
data = list(y = Y),
A = list(A_eq, 1),
effects = list(idx.eq = idx.eq,
df.covar
),
tag = 'model_eq')
# only spatial event terms
stk1_eq <- inla.stack(
data = list(y = Y),
A = list(A_eq, 1),
effects = list(idx.eq = idx.eq,
df.covar
),
tag = 'model_eq')
form_eq <- y ~ 0 + intercept + M1 + M2 + lnR + MlnR + R + lnVS +
f(eqid, model = "iid") + f(statid, model = "iid") +
f(idx.eq, model = spde_eq)
fit_inla_spatial_eq <- inla(form_eq,
data = inla.stack.data(stk1_eq),
control.predictor = list(A = inla.stack.A(stk1_eq)),
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE),
control.inla = list(int.strategy = 'eb')
)
A_eq <- inla.spde.make.A(mesh1, loc = as.matrix(utm_ev))
idx.eq <- inla.spde.make.index("idx.eq",spde_eq$n.spde)
A_stat <- inla.spde.make.A(mesh1, loc = as.matrix(utm_sta))
idx.stat <- inla.spde.make.index("idx.stat",spde_stat$n.spde)
# create the stack
# stack
stk1 <- inla.stack(
data = list(y = Y),
A = list(A_eq, A_stat, 1),
effects = list(idx.eq = idx.eq,
idx.stat = idx.stat,
df.covar
),
tag = 'model_eqstat')
form <- y ~ 0 + intercept + M1 + M2 + lnR + MlnR + R + lnVS +
f(eqid, model = "iid") + f(statid, model = "iid") +
f(idx.eq, model = spde_eq) + f(idx.stat, model = spde_stat)
fit_inla_spatial <- inla(form,
data = inla.stack.data(stk1),
control.predictor = list(A = inla.stack.A(stk1)),
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE),
control.inla = list(int.strategy = 'eb')
)
summary(fit_inla_spatial)
1/sqrt(fit_inla_spatial$summary.hyperpar$mean)[c(1,2,3)]
local.plot.field(fit_inla_spatial$summary.random[['idx.eq']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_ev, col = "black", cex = 0.4)
local.plot.field(fit_inla_spatial$summary.random[['idx.stat']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_sta, col = "black", cex = 0.4)
# only spatial event terms
stk1_eq <- inla.stack(
data = list(y = Y),
A = list(A_eq, 1),
effects = list(idx.eq = idx.eq,
df.covar
),
tag = 'model_eq')
form_eq <- y ~ 0 + intercept + M1 + M2 + lnR + MlnR + R + lnVS +
f(eqid, model = "iid") + f(statid, model = "iid") +
f(idx.eq, model = spde_eq)
fit_inla_spatial_eq <- inla(form_eq,
data = inla.stack.data(stk1_eq),
control.predictor = list(A = inla.stack.A(stk1_eq)),
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE),
control.inla = list(int.strategy = 'eb')
)
local.plot.field(fit_inla_spatial_stat$summary.random[['idx.stat']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
summary(fit_inla_spatial_eq)
1/sqrt(fit_inla_spatial_eq$summary.hyperpar$mean)[c(1,2,3)]
local.plot.field(fit_inla_spatial_eq$summary.random[['idx.eq']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_ev, col = "black", cex = 0.4)
# only spatial station terms
stk1_stat <- inla.stack(
data = list(y = Y),
A = list(A_stat, 1),
effects = list(idx.stat = idx.stat,
df.covar
),
tag = 'model_stat')
form_stat <- y ~ 0 + intercept + M1 + M2 + lnR + MlnR + R + lnVS +
f(eqid, model = "iid") + f(statid, model = "iid") +
f(idx.stat, model = spde_stat)
fit_inla_spatial_stat <- inla(form_stat,
data = inla.stack.data(stk1_stat),
control.predictor = list(A = inla.stack.A(stk1_stat)),
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE),
control.inla = list(int.strategy = 'eb')
)
summary(fit_inla_spatial_stat)
1/sqrt(fit_inla_spatial_stat$summary.hyperpar$mean)[c(1,2,3)]
local.plot.field(fit_inla_spatial_stat$summary.random[['idx.stat']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_sta, col = "black", cex = 0.4)
fit_inla$waic$waic
fit_inla_spatial$waic$waic
fit_inla_spatial_eq$waic$waic
fit_inla_spatial_stat$waic$waic
fit_inla_spatial_dom$waic$waic
fit_inla_dom$waic$waic
# spatial varying anelastic attenuatio coefficients
# define spde prior for constants
prior.range_es = c(50, 0.9)
prior.sigma_es = c(0.1, 0.01)
# se prior and define model for even terms
spde_eq <- inla.spde2.pcmatern(
# Mesh and smoothness parameter
mesh = mesh1, alpha = 2,
# P(practic.range < 0.3) = 0.5
prior.range = prior.range_es,
# P(sigma > 1) = 0.01
prior.sigma = prior.sigma_es)
# define spde prior for constants
prior.range = c(50, 0.9)
prior.sigma = c(0.5, 0.01)
# se prior and define model for even terms
spde_eq <- inla.spde2.pcmatern(
# Mesh and smoothness parameter
mesh = mesh1, alpha = 2,
# P(practic.range < 0.3) = 0.5
prior.range = prior.range,
# P(sigma > 1) = 0.01
prior.sigma = prior.sigma)
# se prior and define model for stat terms
spde_stat <- inla.spde2.pcmatern(
# Mesh and smoothness parameter
mesh = mesh1, alpha = 2,
# P(practic.range < 0.3) = 0.5
prior.range = prior.range,
# P(sigma > 1) = 0.01
prior.sigma = prior.sigma)
# se prior and define model for even terms
spde_eqstat <- inla.spde2.pcmatern(
# Mesh and smoothness parameter
mesh = mesh1, alpha = 2,
# P(practic.range < 0.3) = 0.5
prior.range = prior.range_es,
# P(sigma > 1) = 0.01
prior.sigma = prior.sigma_es)
A_eqstat <- inla.spde.make.A(mesh1, loc = utm_ev_sta, weights = df.covar$R)
idx.eqstat <- inla.spde.make.index("idx.eqstat",spde_eqstat$n.spde)
stk1_eqstat <- inla.stack(
data = list(y = Y),
A = list(A_eqstat, 1),
effects = list(idx.eqstat = idx.eqstat,
df.covar
),
tag = 'model_eqstat')
form_eqstat <- y ~ 0 + intercept + M1 + M2 + lnR + MlnR + R + lnVS +
f(eqid, model = "iid") + f(statid, model = "iid") +
f(idx.eqstat, model = spde_eqstat)
fit_inla_spatial_eqstat <- inla(form_eqstat,
data = inla.stack.data(stk1_eqstat),
control.predictor = list(A = inla.stack.A(stk1_eqstat)),
control.compute = list(dic = TRUE, cpo = TRUE, waic = TRUE),
control.inla = list(int.strategy = 'eb')
)
summary(fit_inla_spatial_eqstat)
1/sqrt(fit_inla_spatial_eqstat$summary.hyperpar$mean)[c(1,2,3)]
local.plot.field(fit_inla_spatial_eqstat$summary.random[['idx.eqstat']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_ev_sta, col = "black", cex = 0.4)
local.plot.field(fit_inla_spatial_eqstat$summary.random[['idx.eqstat']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
local.plot.field(fit_inla_spatial_eqstat$summary.random[['idx.eqstat']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_ev, col = "black", cex = 0.1)
points(utm_sta, col = "blue", cex = 0.1)
local.plot.field(fit_inla_spatial_eqstat$summary.random[['idx.eqstat']][['mean']], mesh1, xlim = c(-200,1400), ylim = c(-5500,-3800))
points(utm_ev, col = "black", cex = 0.1)
points(utm_sta, col = "red", cex = 0.1)
#
poly_nz1 <- read.csv('/Users/nico/GROUNDMOTION/PROJECTS/NSHM_GMCM_NZ/INLA/nz_poly_1.csv')
poly_nz2 <- read.csv('/Users/nico/GROUNDMOTION/PROJECTS/NSHM_GMCM_NZ/INLA/nz_poly_2.csv')
poly_nz1
# convert NZ poygons into UTM coodinates
utm_nz1 = project(poly_nz1, "+proj=utm +zone=59S ellps=WGS84")
utm_nz1 = as.data.frame(utm_nz1/1000)
utm_nz2 = project(poly_nz2, "+proj=utm +zone=59S ellps=WGS84")
utm_nz2 = as.data.frame(utm_nz2/1000)
poly_nz1
# convert station coordinates into UTM coodinates
long_lat_sta = cbind(data_crust$sta_lon, data_crust$sta_lat)
# convert NZ poygons into UTM coodinates
utm_nz1 = project(as.matrix(poly_nz1), "+proj=utm +zone=59S ellps=WGS84")
utm_nz1 = as.data.frame(utm_nz1/1000)
utm_nz2 = project(as.matrix(poly_nz2), "+proj=utm +zone=59S ellps=WGS84")
lines(utm_nz1)
lines(utm_nz2)
utm_nz1 = project(as.matrix(poly_nz1), "+proj=utm +zone=59S ellps=WGS84")
utm_nz1 = as.data.frame(utm_nz1/1000)
utm_nz2 = project(as.matrix(poly_nz2), "+proj=utm +zone=59S ellps=WGS84")
utm_nz2 = as.data.frame(utm_nz2/1000)
lines(utm_nz2)
mesh1$loc[1]
mesh1$loc[,1]
min(mesh1$loc[,1])
max(mesh1$loc[,1])
min(mesh1$loc[,2])
max(mesh1$loc[,2])
