
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace gmm_M1eq_M1statvs_cellattn_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 45, column 2 to column 17)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 47, column 2 to column 22)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 48, column 2 to column 22)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 49, column 2 to column 24)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 51, column 2 to column 23)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 52, column 2 to column 25)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 53, column 2 to column 31)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 54, column 2 to column 32)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 56, column 2 to column 22)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 57, column 2 to column 25)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 59, column 2 to column 19)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 60, column 2 to column 23)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 62, column 2 to column 21)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 63, column 2 to column 25)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 65, column 2 to column 30)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 69, column 2 to column 19)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 70, column 2 to column 23)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 74, column 11 to column 14)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 74, column 15 to column 18)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 74, column 4 to column 27)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 75, column 11 to column 14)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 75, column 15 to column 18)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 75, column 4 to column 25)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 79, column 8 to column 17)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 80, column 8 to column 18)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 82, column 8 to column 38)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 84, column 8 to column 47)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 86, column 8 to column 27)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 87, column 8 to column 34)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 78, column 22 to line 88, column 7)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 78, column 6 to line 88, column 7)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 89, column 6 to column 40)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 77, column 20 to line 90, column 5)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 77, column 4 to line 90, column 5)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 92, column 4 to column 38)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 93, column 4 to column 23)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 73, column 2 to line 94, column 3)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 98, column 11 to column 16)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 98, column 17 to column 22)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 98, column 4 to column 33)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 99, column 11 to column 16)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 99, column 17 to column 22)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 99, column 4 to column 31)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 103, column 8 to column 43)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 105, column 8 to column 68)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 106, column 8 to column 86)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 108, column 8 to column 38)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 109, column 8 to column 38)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 102, column 24 to line 110, column 7)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 102, column 6 to line 110, column 7)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 111, column 6 to column 44)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 101, column 22 to line 112, column 5)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 101, column 4 to line 112, column 5)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 114, column 4 to column 42)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 115, column 4 to column 29)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 97, column 2 to line 116, column 3)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 120, column 9 to column 10)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 120, column 2 to column 20)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 121, column 9 to column 10)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 121, column 2 to column 20)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 123, column 2 to column 28)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 125, column 2 to column 31)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 126, column 2 to column 31)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 127, column 2 to column 33)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 129, column 2 to column 28)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 130, column 2 to column 30)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 131, column 2 to column 29)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 132, column 2 to column 31)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 134, column 2 to column 22)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 135, column 2 to column 24)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 137, column 2 to column 28)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 138, column 2 to column 32)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 141, column 2 to column 30)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 142, column 2 to column 30)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 143, column 2 to column 32)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 145, column 2 to column 99)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 146, column 2 to column 28)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 18, column 2 to column 8)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 19, column 2 to column 10)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 20, column 2 to column 12)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 21, column 2 to column 12)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 23, column 9 to column 10)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 23, column 11 to column 16)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 23, column 2 to column 21)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 25, column 9 to column 10)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 25, column 2 to column 19)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 26, column 9 to column 10)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 26, column 2 to column 15)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 27, column 9 to column 10)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 27, column 2 to column 14)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 29, column 28 to column 29)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 29, column 2 to column 31)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 30, column 32 to column 33)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 30, column 2 to column 35)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 32, column 16 to column 19)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 32, column 2 to column 21)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 33, column 16 to column 21)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 33, column 2 to column 23)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 38, column 2 to column 20)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 39, column 2 to column 23)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 40, column 2 to column 17)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 41, column 9 to column 14)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 41, column 2 to column 35)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 59, column 9 to column 12)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 60, column 9 to column 14)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 62, column 9 to column 12)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 63, column 9 to column 14)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 65, column 18 to column 23)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 69, column 9 to column 12)",
                                                      " (in '../../PROJECTS/NONERGODIC/COMPARISON_REGRESSION/Git/NonergodicGMMS_STAN_INLA/STAN_CODE/gmm_M1eq_M1statvs_cellattn.stan', line 70, column 9 to column 14)"};



class gmm_M1eq_M1statvs_cellattn_model final : public model_base_crtp<gmm_M1eq_M1statvs_cellattn_model> {

 private:
  int N;
  int NEQ;
  int NSTAT;
  int NCELL;
  Eigen::Matrix<double, -1, -1> RC;
  Eigen::Matrix<double, -1, 1> mu_rec;
  Eigen::Matrix<double, -1, 1> VS;
  Eigen::Matrix<double, -1, 1> Y;
  std::vector<int> eq;
  std::vector<int> stat;
  std::vector<Eigen::Matrix<double, -1, 1>> X_e;
  std::vector<Eigen::Matrix<double, -1, 1>> X_s;
  double delta;
  double ln05;
  double sig;
  Eigen::Matrix<double, -1, 1> lnVS;
 
 public:
  ~gmm_M1eq_M1statvs_cellattn_model() { }
  
  inline std::string model_name() const final { return "gmm_M1eq_M1statvs_cellattn_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  gmm_M1eq_M1statvs_cellattn_model(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "gmm_M1eq_M1statvs_cellattn_model_namespace::gmm_M1eq_M1statvs_cellattn_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 78;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 78;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 79;
      context__.validate_dims("data initialization","NEQ","int",
          context__.to_vec());
      NEQ = std::numeric_limits<int>::min();
      
      current_statement__ = 79;
      NEQ = context__.vals_i("NEQ")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization","NSTAT","int",
          context__.to_vec());
      NSTAT = std::numeric_limits<int>::min();
      
      current_statement__ = 80;
      NSTAT = context__.vals_i("NSTAT")[(1 - 1)];
      current_statement__ = 81;
      context__.validate_dims("data initialization","NCELL","int",
          context__.to_vec());
      NCELL = std::numeric_limits<int>::min();
      
      current_statement__ = 81;
      NCELL = context__.vals_i("NCELL")[(1 - 1)];
      current_statement__ = 82;
      validate_non_negative_index("RC", "N", N);
      current_statement__ = 83;
      validate_non_negative_index("RC", "NCELL", NCELL);
      current_statement__ = 84;
      context__.validate_dims("data initialization","RC","double",
          context__.to_vec(N, NCELL));
      RC = Eigen::Matrix<double, -1, -1>(N, NCELL);
      stan::math::fill(RC, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> RC_flat__;
        current_statement__ = 84;
        assign(RC_flat__, nil_index_list(), context__.vals_r("RC"),
          "assigning variable RC_flat__");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
          current_statement__ = 84;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 84;
            assign(RC,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              RC_flat__[(pos__ - 1)], "assigning variable RC");
            current_statement__ = 84;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 85;
      validate_non_negative_index("mu_rec", "N", N);
      current_statement__ = 86;
      context__.validate_dims("data initialization","mu_rec","double",
          context__.to_vec(N));
      mu_rec = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu_rec, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_rec_flat__;
        current_statement__ = 86;
        assign(mu_rec_flat__, nil_index_list(), context__.vals_r("mu_rec"),
          "assigning variable mu_rec_flat__");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 86;
          assign(mu_rec, cons_list(index_uni(sym1__), nil_index_list()),
            mu_rec_flat__[(pos__ - 1)], "assigning variable mu_rec");
          current_statement__ = 86;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 87;
      validate_non_negative_index("VS", "N", N);
      current_statement__ = 88;
      context__.validate_dims("data initialization","VS","double",
          context__.to_vec(N));
      VS = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(VS, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> VS_flat__;
        current_statement__ = 88;
        assign(VS_flat__, nil_index_list(), context__.vals_r("VS"),
          "assigning variable VS_flat__");
        current_statement__ = 88;
        pos__ = 1;
        current_statement__ = 88;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 88;
          assign(VS, cons_list(index_uni(sym1__), nil_index_list()),
            VS_flat__[(pos__ - 1)], "assigning variable VS");
          current_statement__ = 88;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 89;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 90;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(N));
      Y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 90;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 90;
          assign(Y, cons_list(index_uni(sym1__), nil_index_list()),
            Y_flat__[(pos__ - 1)], "assigning variable Y");
          current_statement__ = 90;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 91;
      validate_non_negative_index("eq", "N", N);
      current_statement__ = 92;
      context__.validate_dims("data initialization","eq","int",
          context__.to_vec(N));
      eq = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 92;
      assign(eq, nil_index_list(), context__.vals_i("eq"),
        "assigning variable eq");
      current_statement__ = 92;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 92;
        current_statement__ = 92;
        check_greater_or_equal(function__, "eq[sym1__]", eq[(sym1__ - 1)], 1);
      }
      current_statement__ = 92;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 92;
        current_statement__ = 92;
        check_less_or_equal(function__, "eq[sym1__]", eq[(sym1__ - 1)], NEQ);
      }
      current_statement__ = 93;
      validate_non_negative_index("stat", "N", N);
      current_statement__ = 94;
      context__.validate_dims("data initialization","stat","int",
          context__.to_vec(N));
      stat = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 94;
      assign(stat, nil_index_list(), context__.vals_i("stat"),
        "assigning variable stat");
      current_statement__ = 94;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 94;
        current_statement__ = 94;
        check_greater_or_equal(function__, "stat[sym1__]",
                               stat[(sym1__ - 1)], 1);}
      current_statement__ = 94;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 94;
        current_statement__ = 94;
        check_less_or_equal(function__, "stat[sym1__]", stat[(sym1__ - 1)],
                            NSTAT);}
      current_statement__ = 95;
      validate_non_negative_index("X_e", "NEQ", NEQ);
      current_statement__ = 96;
      context__.validate_dims("data initialization","X_e","double",
          context__.to_vec(NEQ, 2));
      X_e = std::vector<Eigen::Matrix<double, -1, 1>>(NEQ, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(X_e, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_e_flat__;
        current_statement__ = 96;
        assign(X_e_flat__, nil_index_list(), context__.vals_r("X_e"),
          "assigning variable X_e_flat__");
        current_statement__ = 96;
        pos__ = 1;
        current_statement__ = 96;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 96;
          for (int sym2__ = 1; sym2__ <= NEQ; ++sym2__) {
            current_statement__ = 96;
            assign(X_e,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_e_flat__[(pos__ - 1)], "assigning variable X_e");
            current_statement__ = 96;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 97;
      validate_non_negative_index("X_s", "NSTAT", NSTAT);
      current_statement__ = 98;
      context__.validate_dims("data initialization","X_s","double",
          context__.to_vec(NSTAT, 2));
      X_s = std::vector<Eigen::Matrix<double, -1, 1>>(NSTAT, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(X_s, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_s_flat__;
        current_statement__ = 98;
        assign(X_s_flat__, nil_index_list(), context__.vals_r("X_s"),
          "assigning variable X_s_flat__");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 98;
          for (int sym2__ = 1; sym2__ <= NSTAT; ++sym2__) {
            current_statement__ = 98;
            assign(X_s,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_s_flat__[(pos__ - 1)], "assigning variable X_s");
            current_statement__ = 98;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 99;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 99;
      delta = 1e-9;
      current_statement__ = 100;
      ln05 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 100;
      ln05 = stan::math::log(0.5);
      current_statement__ = 101;
      sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 101;
      sig = 0.5;
      current_statement__ = 102;
      validate_non_negative_index("lnVS", "NSTAT", NSTAT);
      current_statement__ = 103;
      lnVS = Eigen::Matrix<double, -1, 1>(NSTAT);
      stan::math::fill(lnVS, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 103;
      assign(lnVS, nil_index_list(), stan::math::log(divide(VS, 400)),
        "assigning variable lnVS");
      current_statement__ = 104;
      validate_non_negative_index("z_eq", "NEQ", NEQ);
      current_statement__ = 105;
      validate_non_negative_index("z_stat", "NSTAT", NSTAT);
      current_statement__ = 106;
      validate_non_negative_index("eqterm", "NEQ", NEQ);
      current_statement__ = 107;
      validate_non_negative_index("statterm", "NSTAT", NSTAT);
      current_statement__ = 108;
      validate_non_negative_index("c_ca", "NCELL", NCELL);
      current_statement__ = 109;
      validate_non_negative_index("f_eq", "NEQ", NEQ);
      current_statement__ = 110;
      validate_non_negative_index("f_stat", "NSTAT", NSTAT);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 2;
      num_params_r__ += 2;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += NEQ;
      num_params_r__ += NSTAT;
      num_params_r__ += NEQ;
      num_params_r__ += NSTAT;
      num_params_r__ += NCELL;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "gmm_M1eq_M1statvs_cellattn_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ intercept;
      intercept = DUMMY_VAR__;
      
      current_statement__ = 1;
      intercept = in__.scalar();
      local_scalar_t__ phi_0;
      phi_0 = DUMMY_VAR__;
      
      current_statement__ = 2;
      phi_0 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        phi_0 = stan::math::lb_constrain(phi_0, 0, lp__);
      } else {
        current_statement__ = 2;
        phi_0 = stan::math::lb_constrain(phi_0, 0);
      }
      local_scalar_t__ tau_0;
      tau_0 = DUMMY_VAR__;
      
      current_statement__ = 3;
      tau_0 = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        tau_0 = stan::math::lb_constrain(tau_0, 0, lp__);
      } else {
        current_statement__ = 3;
        tau_0 = stan::math::lb_constrain(tau_0, 0);
      }
      local_scalar_t__ phi_S2S;
      phi_S2S = DUMMY_VAR__;
      
      current_statement__ = 4;
      phi_S2S = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        phi_S2S = stan::math::lb_constrain(phi_S2S, 0, lp__);
      } else {
        current_statement__ = 4;
        phi_S2S = stan::math::lb_constrain(phi_S2S, 0);
      }
      local_scalar_t__ rho_eq;
      rho_eq = DUMMY_VAR__;
      
      current_statement__ = 5;
      rho_eq = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        rho_eq = stan::math::lb_constrain(rho_eq, 0, lp__);
      } else {
        current_statement__ = 5;
        rho_eq = stan::math::lb_constrain(rho_eq, 0);
      }
      local_scalar_t__ theta_eq;
      theta_eq = DUMMY_VAR__;
      
      current_statement__ = 6;
      theta_eq = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        theta_eq = stan::math::lb_constrain(theta_eq, 0, lp__);
      } else {
        current_statement__ = 6;
        theta_eq = stan::math::lb_constrain(theta_eq, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> rho_stat;
      rho_stat = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(rho_stat, DUMMY_VAR__);
      
      current_statement__ = 7;
      rho_stat = in__.vector(2);
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        assign(rho_stat, nil_index_list(),
          stan::math::positive_ordered_constrain(rho_stat, lp__),
          "assigning variable rho_stat");
      } else {
        current_statement__ = 7;
        assign(rho_stat, nil_index_list(),
          stan::math::positive_ordered_constrain(rho_stat),
          "assigning variable rho_stat");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_stat;
      theta_stat = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(theta_stat, DUMMY_VAR__);
      
      current_statement__ = 8;
      theta_stat = in__.vector(2);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(theta_stat, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(theta_stat[(sym1__ - 1)], 0, lp__),
            "assigning variable theta_stat");
        } else {
          current_statement__ = 8;
          assign(theta_stat, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(theta_stat[(sym1__ - 1)], 0),
            "assigning variable theta_stat");
        }}
      local_scalar_t__ mu_ca;
      mu_ca = DUMMY_VAR__;
      
      current_statement__ = 9;
      mu_ca = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        mu_ca = stan::math::lb_constrain(mu_ca, 0, lp__);
      } else {
        current_statement__ = 9;
        mu_ca = stan::math::lb_constrain(mu_ca, 0);
      }
      local_scalar_t__ sigma_ca;
      sigma_ca = DUMMY_VAR__;
      
      current_statement__ = 10;
      sigma_ca = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        sigma_ca = stan::math::lb_constrain(sigma_ca, 0, lp__);
      } else {
        current_statement__ = 10;
        sigma_ca = stan::math::lb_constrain(sigma_ca, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> z_eq;
      z_eq = Eigen::Matrix<local_scalar_t__, -1, 1>(NEQ);
      stan::math::fill(z_eq, DUMMY_VAR__);
      
      current_statement__ = 11;
      z_eq = in__.vector(NEQ);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_stat;
      z_stat = Eigen::Matrix<local_scalar_t__, -1, 1>(NSTAT);
      stan::math::fill(z_stat, DUMMY_VAR__);
      
      current_statement__ = 12;
      z_stat = in__.vector(NSTAT);
      Eigen::Matrix<local_scalar_t__, -1, 1> eqterm;
      eqterm = Eigen::Matrix<local_scalar_t__, -1, 1>(NEQ);
      stan::math::fill(eqterm, DUMMY_VAR__);
      
      current_statement__ = 13;
      eqterm = in__.vector(NEQ);
      Eigen::Matrix<local_scalar_t__, -1, 1> statterm;
      statterm = Eigen::Matrix<local_scalar_t__, -1, 1>(NSTAT);
      stan::math::fill(statterm, DUMMY_VAR__);
      
      current_statement__ = 14;
      statterm = in__.vector(NSTAT);
      Eigen::Matrix<local_scalar_t__, -1, 1> c_ca;
      c_ca = Eigen::Matrix<local_scalar_t__, -1, 1>(NCELL);
      stan::math::fill(c_ca, DUMMY_VAR__);
      
      current_statement__ = 15;
      c_ca = in__.vector(NCELL);
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
        current_statement__ = 15;
        if (jacobian__) {
          current_statement__ = 15;
          assign(c_ca, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(c_ca[(sym1__ - 1)], 0, lp__),
            "assigning variable c_ca");
        } else {
          current_statement__ = 15;
          assign(c_ca, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(c_ca[(sym1__ - 1)], 0),
            "assigning variable c_ca");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> f_eq;
      f_eq = Eigen::Matrix<local_scalar_t__, -1, 1>(NEQ);
      stan::math::fill(f_eq, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> f_stat;
      f_stat = Eigen::Matrix<local_scalar_t__, -1, 1>(NSTAT);
      stan::math::fill(f_stat, DUMMY_VAR__);
      
      {
        current_statement__ = 18;
        validate_non_negative_index("cov_eq", "NEQ", NEQ);
        current_statement__ = 19;
        validate_non_negative_index("cov_eq", "NEQ", NEQ);
        Eigen::Matrix<local_scalar_t__, -1, -1> cov_eq;
        cov_eq = Eigen::Matrix<local_scalar_t__, -1, -1>(NEQ, NEQ);
        stan::math::fill(cov_eq, DUMMY_VAR__);
        
        current_statement__ = 21;
        validate_non_negative_index("L_eq", "NEQ", NEQ);
        current_statement__ = 22;
        validate_non_negative_index("L_eq", "NEQ", NEQ);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_eq;
        L_eq = Eigen::Matrix<local_scalar_t__, -1, -1>(NEQ, NEQ);
        stan::math::fill(L_eq, DUMMY_VAR__);
        
        current_statement__ = 34;
        for (int i = 1; i <= NEQ; ++i) {
          current_statement__ = 31;
          for (int j = i; j <= NEQ; ++j) {
            local_scalar_t__ d_e;
            d_e = DUMMY_VAR__;
            
            local_scalar_t__ c_eq;
            c_eq = DUMMY_VAR__;
            
            current_statement__ = 26;
            d_e = distance(X_e[(i - 1)], X_e[(j - 1)]);
            current_statement__ = 27;
            c_eq = (pow(theta_eq, 2) * stan::math::exp((-d_e / rho_eq)));
            current_statement__ = 28;
            assign(cov_eq,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), c_eq,
              "assigning variable cov_eq");
            current_statement__ = 29;
            assign(cov_eq,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())),
              rvalue(cov_eq,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "cov_eq"),
              "assigning variable cov_eq");}
          current_statement__ = 32;
          assign(cov_eq,
            cons_list(index_uni(i),
              cons_list(index_uni(i), nil_index_list())),
            (rvalue(cov_eq,
               cons_list(index_uni(i),
                 cons_list(index_uni(i), nil_index_list())), "cov_eq") +
              delta), "assigning variable cov_eq");}
        current_statement__ = 35;
        assign(L_eq, nil_index_list(), cholesky_decompose(cov_eq),
          "assigning variable L_eq");
        current_statement__ = 36;
        assign(f_eq, nil_index_list(), multiply(L_eq, z_eq),
          "assigning variable f_eq");
      }
      {
        current_statement__ = 38;
        validate_non_negative_index("cov_stat", "NSTAT", NSTAT);
        current_statement__ = 39;
        validate_non_negative_index("cov_stat", "NSTAT", NSTAT);
        Eigen::Matrix<local_scalar_t__, -1, -1> cov_stat;
        cov_stat = Eigen::Matrix<local_scalar_t__, -1, -1>(NSTAT, NSTAT);
        stan::math::fill(cov_stat, DUMMY_VAR__);
        
        current_statement__ = 41;
        validate_non_negative_index("L_stat", "NSTAT", NSTAT);
        current_statement__ = 42;
        validate_non_negative_index("L_stat", "NSTAT", NSTAT);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_stat;
        L_stat = Eigen::Matrix<local_scalar_t__, -1, -1>(NSTAT, NSTAT);
        stan::math::fill(L_stat, DUMMY_VAR__);
        
        current_statement__ = 53;
        for (int i = 1; i <= NSTAT; ++i) {
          current_statement__ = 50;
          for (int j = i; j <= NSTAT; ++j) {
            local_scalar_t__ d_s;
            d_s = DUMMY_VAR__;
            
            current_statement__ = 44;
            d_s = distance(X_s[(i - 1)], X_s[(j - 1)]);
            local_scalar_t__ c_stat;
            c_stat = DUMMY_VAR__;
            
            current_statement__ = 45;
            c_stat = (square(theta_stat[(1 - 1)]) *
                       stan::math::exp((-d_s / rho_stat[(1 - 1)])));
            local_scalar_t__ c_vs;
            c_vs = DUMMY_VAR__;
            
            current_statement__ = 46;
            c_vs = (((lnVS[(i - 1)] * lnVS[(j - 1)]) *
                      square(theta_stat[(2 - 1)])) *
                     stan::math::exp((-d_s / rho_stat[(2 - 1)])));
            current_statement__ = 47;
            assign(cov_stat,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), (c_stat + c_vs),
              "assigning variable cov_stat");
            current_statement__ = 48;
            assign(cov_stat,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())),
              rvalue(cov_stat,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "cov_stat"),
              "assigning variable cov_stat");}
          current_statement__ = 51;
          assign(cov_stat,
            cons_list(index_uni(i),
              cons_list(index_uni(i), nil_index_list())),
            (rvalue(cov_stat,
               cons_list(index_uni(i),
                 cons_list(index_uni(i), nil_index_list())), "cov_stat") +
              delta), "assigning variable cov_stat");}
        current_statement__ = 54;
        assign(L_stat, nil_index_list(), cholesky_decompose(cov_stat),
          "assigning variable L_stat");
        current_statement__ = 55;
        assign(f_stat, nil_index_list(), multiply(L_stat, z_stat),
          "assigning variable f_stat");
      }
      {
        current_statement__ = 57;
        validate_non_negative_index("mu_rec2", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu_rec2;
        mu_rec2 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(mu_rec2, DUMMY_VAR__);
        
        current_statement__ = 59;
        validate_non_negative_index("mu_rec3", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu_rec3;
        mu_rec3 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(mu_rec3, DUMMY_VAR__);
        
        current_statement__ = 61;
        lp_accum__.add(normal_lpdf<propto__>(intercept, 0, 0.1));
        current_statement__ = 62;
        lp_accum__.add(lognormal_lpdf<propto__>(phi_0, ln05, sig));
        current_statement__ = 63;
        lp_accum__.add(lognormal_lpdf<propto__>(tau_0, ln05, sig));
        current_statement__ = 64;
        lp_accum__.add(lognormal_lpdf<propto__>(phi_S2S, ln05, sig));
        current_statement__ = 65;
        lp_accum__.add(inv_gamma_lpdf<propto__>(rho_eq, 3, 0.5));
        current_statement__ = 66;
        lp_accum__.add(inv_gamma_lpdf<propto__>(rho_stat, 3, 0.5));
        current_statement__ = 67;
        lp_accum__.add(exponential_lpdf<propto__>(theta_eq, 20));
        current_statement__ = 68;
        lp_accum__.add(exponential_lpdf<propto__>(theta_stat, 20));
        current_statement__ = 69;
        lp_accum__.add(std_normal_lpdf<propto__>(z_eq));
        current_statement__ = 70;
        lp_accum__.add(std_normal_lpdf<propto__>(z_stat));
        current_statement__ = 71;
        lp_accum__.add(normal_lpdf<propto__>(eqterm, 0, tau_0));
        current_statement__ = 72;
        lp_accum__.add(normal_lpdf<propto__>(statterm, 0, phi_S2S));
        current_statement__ = 73;
        lp_accum__.add(exponential_lpdf<propto__>(sigma_ca, 100));
        current_statement__ = 74;
        lp_accum__.add(lognormal_lpdf<propto__>(mu_ca, -4.6, 0.5));
        current_statement__ = 75;
        lp_accum__.add(normal_lpdf<propto__>(c_ca, mu_ca, sigma_ca));
        current_statement__ = 76;
        assign(mu_rec2, nil_index_list(),
          add(
            add(
              add(
                add(subtract(add(mu_rec, intercept), multiply(RC, c_ca)),
                  rvalue(f_eq, cons_list(index_multi(eq), nil_index_list()),
                    "f_eq")),
                rvalue(f_stat,
                  cons_list(index_multi(stat), nil_index_list()), "f_stat")),
              rvalue(eqterm, cons_list(index_multi(eq), nil_index_list()),
                "eqterm")),
            rvalue(statterm, cons_list(index_multi(stat), nil_index_list()),
              "statterm")), "assigning variable mu_rec2");
        current_statement__ = 77;
        lp_accum__.add(normal_lpdf<propto__>(Y, mu_rec2, phi_0));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "gmm_M1eq_M1statvs_cellattn_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double intercept;
      intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      intercept = in__.scalar();
      double phi_0;
      phi_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      phi_0 = in__.scalar();
      current_statement__ = 2;
      phi_0 = stan::math::lb_constrain(phi_0, 0);
      double tau_0;
      tau_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_0 = in__.scalar();
      current_statement__ = 3;
      tau_0 = stan::math::lb_constrain(tau_0, 0);
      double phi_S2S;
      phi_S2S = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      phi_S2S = in__.scalar();
      current_statement__ = 4;
      phi_S2S = stan::math::lb_constrain(phi_S2S, 0);
      double rho_eq;
      rho_eq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_eq = in__.scalar();
      current_statement__ = 5;
      rho_eq = stan::math::lb_constrain(rho_eq, 0);
      double theta_eq;
      theta_eq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      theta_eq = in__.scalar();
      current_statement__ = 6;
      theta_eq = stan::math::lb_constrain(theta_eq, 0);
      Eigen::Matrix<double, -1, 1> rho_stat;
      rho_stat = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(rho_stat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      rho_stat = in__.vector(2);
      current_statement__ = 7;
      assign(rho_stat, nil_index_list(),
        stan::math::positive_ordered_constrain(rho_stat),
        "assigning variable rho_stat");
      Eigen::Matrix<double, -1, 1> theta_stat;
      theta_stat = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(theta_stat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      theta_stat = in__.vector(2);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 8;
        assign(theta_stat, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(theta_stat[(sym1__ - 1)], 0),
          "assigning variable theta_stat");}
      double mu_ca;
      mu_ca = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      mu_ca = in__.scalar();
      current_statement__ = 9;
      mu_ca = stan::math::lb_constrain(mu_ca, 0);
      double sigma_ca;
      sigma_ca = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_ca = in__.scalar();
      current_statement__ = 10;
      sigma_ca = stan::math::lb_constrain(sigma_ca, 0);
      Eigen::Matrix<double, -1, 1> z_eq;
      z_eq = Eigen::Matrix<double, -1, 1>(NEQ);
      stan::math::fill(z_eq, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      z_eq = in__.vector(NEQ);
      Eigen::Matrix<double, -1, 1> z_stat;
      z_stat = Eigen::Matrix<double, -1, 1>(NSTAT);
      stan::math::fill(z_stat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      z_stat = in__.vector(NSTAT);
      Eigen::Matrix<double, -1, 1> eqterm;
      eqterm = Eigen::Matrix<double, -1, 1>(NEQ);
      stan::math::fill(eqterm, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      eqterm = in__.vector(NEQ);
      Eigen::Matrix<double, -1, 1> statterm;
      statterm = Eigen::Matrix<double, -1, 1>(NSTAT);
      stan::math::fill(statterm, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      statterm = in__.vector(NSTAT);
      Eigen::Matrix<double, -1, 1> c_ca;
      c_ca = Eigen::Matrix<double, -1, 1>(NCELL);
      stan::math::fill(c_ca, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      c_ca = in__.vector(NCELL);
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
        current_statement__ = 15;
        assign(c_ca, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(c_ca[(sym1__ - 1)], 0),
          "assigning variable c_ca");}
      Eigen::Matrix<double, -1, 1> f_eq;
      f_eq = Eigen::Matrix<double, -1, 1>(NEQ);
      stan::math::fill(f_eq, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> f_stat;
      f_stat = Eigen::Matrix<double, -1, 1>(NSTAT);
      stan::math::fill(f_stat, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(intercept);
      vars__.emplace_back(phi_0);
      vars__.emplace_back(tau_0);
      vars__.emplace_back(phi_S2S);
      vars__.emplace_back(rho_eq);
      vars__.emplace_back(theta_eq);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(rho_stat[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(theta_stat[(sym1__ - 1)]);}
      vars__.emplace_back(mu_ca);
      vars__.emplace_back(sigma_ca);
      for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
        vars__.emplace_back(z_eq[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
        vars__.emplace_back(z_stat[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
        vars__.emplace_back(eqterm[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
        vars__.emplace_back(statterm[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
        vars__.emplace_back(c_ca[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        current_statement__ = 18;
        validate_non_negative_index("cov_eq", "NEQ", NEQ);
        current_statement__ = 19;
        validate_non_negative_index("cov_eq", "NEQ", NEQ);
        Eigen::Matrix<double, -1, -1> cov_eq;
        cov_eq = Eigen::Matrix<double, -1, -1>(NEQ, NEQ);
        stan::math::fill(cov_eq, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 21;
        validate_non_negative_index("L_eq", "NEQ", NEQ);
        current_statement__ = 22;
        validate_non_negative_index("L_eq", "NEQ", NEQ);
        Eigen::Matrix<double, -1, -1> L_eq;
        L_eq = Eigen::Matrix<double, -1, -1>(NEQ, NEQ);
        stan::math::fill(L_eq, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 34;
        for (int i = 1; i <= NEQ; ++i) {
          current_statement__ = 31;
          for (int j = i; j <= NEQ; ++j) {
            double d_e;
            d_e = std::numeric_limits<double>::quiet_NaN();
            
            double c_eq;
            c_eq = std::numeric_limits<double>::quiet_NaN();
            
            current_statement__ = 26;
            d_e = distance(X_e[(i - 1)], X_e[(j - 1)]);
            current_statement__ = 27;
            c_eq = (pow(theta_eq, 2) * stan::math::exp((-d_e / rho_eq)));
            current_statement__ = 28;
            assign(cov_eq,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), c_eq,
              "assigning variable cov_eq");
            current_statement__ = 29;
            assign(cov_eq,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())),
              rvalue(cov_eq,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "cov_eq"),
              "assigning variable cov_eq");}
          current_statement__ = 32;
          assign(cov_eq,
            cons_list(index_uni(i),
              cons_list(index_uni(i), nil_index_list())),
            (rvalue(cov_eq,
               cons_list(index_uni(i),
                 cons_list(index_uni(i), nil_index_list())), "cov_eq") +
              delta), "assigning variable cov_eq");}
        current_statement__ = 35;
        assign(L_eq, nil_index_list(), cholesky_decompose(cov_eq),
          "assigning variable L_eq");
        current_statement__ = 36;
        assign(f_eq, nil_index_list(), multiply(L_eq, z_eq),
          "assigning variable f_eq");
      }
      {
        current_statement__ = 38;
        validate_non_negative_index("cov_stat", "NSTAT", NSTAT);
        current_statement__ = 39;
        validate_non_negative_index("cov_stat", "NSTAT", NSTAT);
        Eigen::Matrix<double, -1, -1> cov_stat;
        cov_stat = Eigen::Matrix<double, -1, -1>(NSTAT, NSTAT);
        stan::math::fill(cov_stat, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 41;
        validate_non_negative_index("L_stat", "NSTAT", NSTAT);
        current_statement__ = 42;
        validate_non_negative_index("L_stat", "NSTAT", NSTAT);
        Eigen::Matrix<double, -1, -1> L_stat;
        L_stat = Eigen::Matrix<double, -1, -1>(NSTAT, NSTAT);
        stan::math::fill(L_stat, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 53;
        for (int i = 1; i <= NSTAT; ++i) {
          current_statement__ = 50;
          for (int j = i; j <= NSTAT; ++j) {
            double d_s;
            d_s = std::numeric_limits<double>::quiet_NaN();
            
            current_statement__ = 44;
            d_s = distance(X_s[(i - 1)], X_s[(j - 1)]);
            double c_stat;
            c_stat = std::numeric_limits<double>::quiet_NaN();
            
            current_statement__ = 45;
            c_stat = (square(theta_stat[(1 - 1)]) *
                       stan::math::exp((-d_s / rho_stat[(1 - 1)])));
            double c_vs;
            c_vs = std::numeric_limits<double>::quiet_NaN();
            
            current_statement__ = 46;
            c_vs = (((lnVS[(i - 1)] * lnVS[(j - 1)]) *
                      square(theta_stat[(2 - 1)])) *
                     stan::math::exp((-d_s / rho_stat[(2 - 1)])));
            current_statement__ = 47;
            assign(cov_stat,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), (c_stat + c_vs),
              "assigning variable cov_stat");
            current_statement__ = 48;
            assign(cov_stat,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())),
              rvalue(cov_stat,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "cov_stat"),
              "assigning variable cov_stat");}
          current_statement__ = 51;
          assign(cov_stat,
            cons_list(index_uni(i),
              cons_list(index_uni(i), nil_index_list())),
            (rvalue(cov_stat,
               cons_list(index_uni(i),
                 cons_list(index_uni(i), nil_index_list())), "cov_stat") +
              delta), "assigning variable cov_stat");}
        current_statement__ = 54;
        assign(L_stat, nil_index_list(), cholesky_decompose(cov_stat),
          "assigning variable L_stat");
        current_statement__ = 55;
        assign(f_stat, nil_index_list(), multiply(L_stat, z_stat),
          "assigning variable f_stat");
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
          vars__.emplace_back(f_eq[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
          vars__.emplace_back(f_stat[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double intercept;
      intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      intercept = context__.vals_r("intercept")[(1 - 1)];
      double phi_0;
      phi_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      phi_0 = context__.vals_r("phi_0")[(1 - 1)];
      double phi_0_free__;
      phi_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      phi_0_free__ = stan::math::lb_free(phi_0, 0);
      double tau_0;
      tau_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_0 = context__.vals_r("tau_0")[(1 - 1)];
      double tau_0_free__;
      tau_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_0_free__ = stan::math::lb_free(tau_0, 0);
      double phi_S2S;
      phi_S2S = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      phi_S2S = context__.vals_r("phi_S2S")[(1 - 1)];
      double phi_S2S_free__;
      phi_S2S_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      phi_S2S_free__ = stan::math::lb_free(phi_S2S, 0);
      double rho_eq;
      rho_eq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_eq = context__.vals_r("rho_eq")[(1 - 1)];
      double rho_eq_free__;
      rho_eq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_eq_free__ = stan::math::lb_free(rho_eq, 0);
      double theta_eq;
      theta_eq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      theta_eq = context__.vals_r("theta_eq")[(1 - 1)];
      double theta_eq_free__;
      theta_eq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      theta_eq_free__ = stan::math::lb_free(theta_eq, 0);
      Eigen::Matrix<double, -1, 1> rho_stat;
      rho_stat = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(rho_stat, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rho_stat_flat__;
        current_statement__ = 7;
        assign(rho_stat_flat__, nil_index_list(),
          context__.vals_r("rho_stat"), "assigning variable rho_stat_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 7;
          assign(rho_stat, cons_list(index_uni(sym1__), nil_index_list()),
            rho_stat_flat__[(pos__ - 1)], "assigning variable rho_stat");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rho_stat_free__;
      rho_stat_free__ = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(rho_stat_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(rho_stat_free__, nil_index_list(),
        stan::math::positive_ordered_free(rho_stat),
        "assigning variable rho_stat_free__");
      Eigen::Matrix<double, -1, 1> theta_stat;
      theta_stat = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(theta_stat, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_stat_flat__;
        current_statement__ = 8;
        assign(theta_stat_flat__, nil_index_list(),
          context__.vals_r("theta_stat"),
          "assigning variable theta_stat_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 8;
          assign(theta_stat, cons_list(index_uni(sym1__), nil_index_list()),
            theta_stat_flat__[(pos__ - 1)], "assigning variable theta_stat");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> theta_stat_free__;
      theta_stat_free__ = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(theta_stat_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 8;
        assign(theta_stat_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(theta_stat[(sym1__ - 1)], 0),
          "assigning variable theta_stat_free__");}
      double mu_ca;
      mu_ca = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      mu_ca = context__.vals_r("mu_ca")[(1 - 1)];
      double mu_ca_free__;
      mu_ca_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      mu_ca_free__ = stan::math::lb_free(mu_ca, 0);
      double sigma_ca;
      sigma_ca = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_ca = context__.vals_r("sigma_ca")[(1 - 1)];
      double sigma_ca_free__;
      sigma_ca_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_ca_free__ = stan::math::lb_free(sigma_ca, 0);
      Eigen::Matrix<double, -1, 1> z_eq;
      z_eq = Eigen::Matrix<double, -1, 1>(NEQ);
      stan::math::fill(z_eq, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_eq_flat__;
        current_statement__ = 11;
        assign(z_eq_flat__, nil_index_list(), context__.vals_r("z_eq"),
          "assigning variable z_eq_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
          current_statement__ = 11;
          assign(z_eq, cons_list(index_uni(sym1__), nil_index_list()),
            z_eq_flat__[(pos__ - 1)], "assigning variable z_eq");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_stat;
      z_stat = Eigen::Matrix<double, -1, 1>(NSTAT);
      stan::math::fill(z_stat, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_stat_flat__;
        current_statement__ = 12;
        assign(z_stat_flat__, nil_index_list(), context__.vals_r("z_stat"),
          "assigning variable z_stat_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
          current_statement__ = 12;
          assign(z_stat, cons_list(index_uni(sym1__), nil_index_list()),
            z_stat_flat__[(pos__ - 1)], "assigning variable z_stat");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> eqterm;
      eqterm = Eigen::Matrix<double, -1, 1>(NEQ);
      stan::math::fill(eqterm, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eqterm_flat__;
        current_statement__ = 13;
        assign(eqterm_flat__, nil_index_list(), context__.vals_r("eqterm"),
          "assigning variable eqterm_flat__");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
          current_statement__ = 13;
          assign(eqterm, cons_list(index_uni(sym1__), nil_index_list()),
            eqterm_flat__[(pos__ - 1)], "assigning variable eqterm");
          current_statement__ = 13;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> statterm;
      statterm = Eigen::Matrix<double, -1, 1>(NSTAT);
      stan::math::fill(statterm, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> statterm_flat__;
        current_statement__ = 14;
        assign(statterm_flat__, nil_index_list(),
          context__.vals_r("statterm"), "assigning variable statterm_flat__");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
          current_statement__ = 14;
          assign(statterm, cons_list(index_uni(sym1__), nil_index_list()),
            statterm_flat__[(pos__ - 1)], "assigning variable statterm");
          current_statement__ = 14;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> c_ca;
      c_ca = Eigen::Matrix<double, -1, 1>(NCELL);
      stan::math::fill(c_ca, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> c_ca_flat__;
        current_statement__ = 15;
        assign(c_ca_flat__, nil_index_list(), context__.vals_r("c_ca"),
          "assigning variable c_ca_flat__");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
          current_statement__ = 15;
          assign(c_ca, cons_list(index_uni(sym1__), nil_index_list()),
            c_ca_flat__[(pos__ - 1)], "assigning variable c_ca");
          current_statement__ = 15;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> c_ca_free__;
      c_ca_free__ = Eigen::Matrix<double, -1, 1>(NCELL);
      stan::math::fill(c_ca_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
        current_statement__ = 15;
        assign(c_ca_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(c_ca[(sym1__ - 1)], 0),
          "assigning variable c_ca_free__");}
      vars__.emplace_back(intercept);
      vars__.emplace_back(phi_0_free__);
      vars__.emplace_back(tau_0_free__);
      vars__.emplace_back(phi_S2S_free__);
      vars__.emplace_back(rho_eq_free__);
      vars__.emplace_back(theta_eq_free__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(rho_stat_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(theta_stat_free__[(sym1__ - 1)]);}
      vars__.emplace_back(mu_ca_free__);
      vars__.emplace_back(sigma_ca_free__);
      for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
        vars__.emplace_back(z_eq[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
        vars__.emplace_back(z_stat[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
        vars__.emplace_back(eqterm[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
        vars__.emplace_back(statterm[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
        vars__.emplace_back(c_ca_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("intercept");
    names__.emplace_back("phi_0");
    names__.emplace_back("tau_0");
    names__.emplace_back("phi_S2S");
    names__.emplace_back("rho_eq");
    names__.emplace_back("theta_eq");
    names__.emplace_back("rho_stat");
    names__.emplace_back("theta_stat");
    names__.emplace_back("mu_ca");
    names__.emplace_back("sigma_ca");
    names__.emplace_back("z_eq");
    names__.emplace_back("z_stat");
    names__.emplace_back("eqterm");
    names__.emplace_back("statterm");
    names__.emplace_back("c_ca");
    names__.emplace_back("f_eq");
    names__.emplace_back("f_stat");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NEQ)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NSTAT)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NEQ)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NSTAT)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NCELL)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NEQ)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NSTAT)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "intercept");
    param_names__.emplace_back(std::string() + "phi_0");
    param_names__.emplace_back(std::string() + "tau_0");
    param_names__.emplace_back(std::string() + "phi_S2S");
    param_names__.emplace_back(std::string() + "rho_eq");
    param_names__.emplace_back(std::string() + "theta_eq");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho_stat" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_stat" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "mu_ca");
    param_names__.emplace_back(std::string() + "sigma_ca");
    for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_eq" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_stat" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eqterm" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "statterm" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c_ca" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f_eq" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f_stat" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "intercept");
    param_names__.emplace_back(std::string() + "phi_0");
    param_names__.emplace_back(std::string() + "tau_0");
    param_names__.emplace_back(std::string() + "phi_S2S");
    param_names__.emplace_back(std::string() + "rho_eq");
    param_names__.emplace_back(std::string() + "theta_eq");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho_stat" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_stat" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "mu_ca");
    param_names__.emplace_back(std::string() + "sigma_ca");
    for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_eq" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_stat" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eqterm" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "statterm" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NCELL; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c_ca" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NEQ; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f_eq" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= NSTAT; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f_stat" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_S2S\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_eq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_eq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_stat\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"theta_stat\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"mu_ca\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ca\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_eq\",\"type\":{\"name\":\"vector\",\"length\":" << NEQ << "},\"block\":\"parameters\"},{\"name\":\"z_stat\",\"type\":{\"name\":\"vector\",\"length\":" << NSTAT << "},\"block\":\"parameters\"},{\"name\":\"eqterm\",\"type\":{\"name\":\"vector\",\"length\":" << NEQ << "},\"block\":\"parameters\"},{\"name\":\"statterm\",\"type\":{\"name\":\"vector\",\"length\":" << NSTAT << "},\"block\":\"parameters\"},{\"name\":\"c_ca\",\"type\":{\"name\":\"vector\",\"length\":" << NCELL << "},\"block\":\"parameters\"},{\"name\":\"f_eq\",\"type\":{\"name\":\"vector\",\"length\":" << NEQ << "},\"block\":\"transformed_parameters\"},{\"name\":\"f_stat\",\"type\":{\"name\":\"vector\",\"length\":" << NSTAT << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_S2S\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_eq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_eq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_stat\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"theta_stat\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"mu_ca\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ca\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_eq\",\"type\":{\"name\":\"vector\",\"length\":" << NEQ << "},\"block\":\"parameters\"},{\"name\":\"z_stat\",\"type\":{\"name\":\"vector\",\"length\":" << NSTAT << "},\"block\":\"parameters\"},{\"name\":\"eqterm\",\"type\":{\"name\":\"vector\",\"length\":" << NEQ << "},\"block\":\"parameters\"},{\"name\":\"statterm\",\"type\":{\"name\":\"vector\",\"length\":" << NSTAT << "},\"block\":\"parameters\"},{\"name\":\"c_ca\",\"type\":{\"name\":\"vector\",\"length\":" << NCELL << "},\"block\":\"parameters\"},{\"name\":\"f_eq\",\"type\":{\"name\":\"vector\",\"length\":" << NEQ << "},\"block\":\"transformed_parameters\"},{\"name\":\"f_stat\",\"type\":{\"name\":\"vector\",\"length\":" << NSTAT << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}

using stan_model = gmm_M1eq_M1statvs_cellattn_model_namespace::gmm_M1eq_M1statvs_cellattn_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gmm_M1eq_M1statvs_cellattn_model_namespace::profiles__;
}

#endif


